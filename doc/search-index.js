var searchIndex = {};
searchIndex["vec2d"] = {"doc":"Vec2D is a very simple 2D container for storing rectangular data","items":[[3,"Coord","vec2d","2D coordinate",null,null],[12,"x","","X component",0,null],[12,"y","","Y component",0,null],[3,"Rect","","Rectangle defined by inclusive minimum and maximum coordinates",null,null],[3,"Size","","Rectangle dimensions",null,null],[12,"width","","Width of rectangle",1,null],[12,"height","","Height of rectangle",1,null],[3,"Vec2D","","Container for 2D data",null,null],[3,"RectIter","","Iterator over a rectangle within a Vec2D",null,null],[3,"RectIterMut","","Mutable iterator over a rectangle within a Vec2D",null,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"new","","Create a coordinate at (x, y)",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"coord"}}],[11,"add","","",0,null],[11,"width","","Calculate rectangle width",2,null],[11,"height","","Calculate rectangle height",2,null],[11,"size","","Calculate rectangle size",2,null],[11,"contains_coord","","Return true if the coordinate is between `min_coord` and\n`max_coord` (inclusive).",2,null],[11,"new","","Create a 2D size of (width, height)",1,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"size"}}],[11,"area","","width * height",1,null],[11,"contains_coord","","Return true if the coordinate fits within self&#39;s width and\nheight, false otherwise.",1,null],[11,"rect","","Create a rectangle starting at (0, 0) with `self`&#39;s size.",1,null],[11,"from_example","","Create a Vec2D with the given `size`. All elements are\ninitialized as copies of the `example` element.",3,{"inputs":[{"name":"size"},{"name":"elem"}],"output":{"name":"vec2d"}}],[11,"from_vec","","Create a Vec2D with the given `size`. The contents are set to\n`src`. None is returned if the `size` does not match the\nlength of `src`.",3,{"inputs":[{"name":"size"},{"name":"vec"}],"output":{"name":"option"}}],[11,"get","","Returns element at the given coord or `None` if the coord is\noutside the Vec2D",3,null],[11,"get_mut","","Returns a mutable reference to the element at the given coord or\n`None` if the coord is outside the Vec2D",3,null],[11,"rect","","Shortcut for self.size.rect()",3,null],[11,"resize","","Resize in-place so that `size()` is equal to `new_size`",3,null],[11,"size","","Width and height",3,null],[11,"iter","","Iterator over the entire Vec2D.",3,null],[11,"rect_iter","","Create an iterator over a rectangular region of the\nVec2D. None is returned if the given `rect` does not fit\nentirely within the Vec2D.",3,null],[11,"rect_iter_at","","Create an iterator over a rectangular region of the Vec2D with\nthe `start` coord. None is returned if the given `rect` does\nnot fit entirely within the Vec2D or if the `start` coord is\nnot within `rect`.",3,null],[11,"iter_mut","","Mutable iterater over the entire Vec2D.",3,null],[11,"rect_iter_mut","","Create a mutable iterator over a rectangular region of the\nVec2D. None is returned if the given `rect` does not fit\nentirely within the Vec2D.",3,null],[11,"rect_iter_mut_at","","Create a mutable iterator over a rectangular region of the\nVec2D with the `start` coord. None is returned if the given\n`rect` does not fit entirely within the Vec2D or if the\n`start` coord is not within `rect`.",3,null],[11,"next","","",4,null],[11,"next","","",5,null],[11,"new","","Create a new Rect defined by inclusive minimum and maximum\ncoordinates. If min_coord is greater than max_coord on either\naxis then None is returned.",2,{"inputs":[{"name":"coord"},{"name":"coord"}],"output":{"name":"option"}}]],"paths":[[3,"Coord"],[3,"Size"],[3,"Rect"],[3,"Vec2D"],[3,"RectIter"],[3,"RectIterMut"]]};
initSearch(searchIndex);
